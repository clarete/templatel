#+TITLE: Introduction to templatel
#+OPTIONS: toc:nil num:nil

* Introduction

  /templatel/ is the modern templating language that was missing for
  Emacs-Lisp.  It provides variable substitution and control flow
  through a clean and powerful language inspired by Python's [[https://jinja.palletsprojects.com/][Jinja]].

  #+BEGIN_SRC jinja2
  {% extends "base.html" %}
  {% block title %}<h1>{{ title }}</h1>{% endblock %}
  {% block body %}
    <ul>
      {% for page in pages %}
        <li><a href="{{ page.url }}">{{ page.title }}</a></li>
      {% endfor %}
    </ul>
  {% endblock %}
  #+END_SRC

* Installation

** Via Melpa

   The simplest and recommended way to get yourself a copy of
   ~templatel~ is to install it via [[https://melpa.org][MELPA]].  You must have something
   along these lines on your Emacs configuration for that to work:

   #+BEGIN_SRC emacs-lisp
   (package-initialize)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   #+END_SRC

   And then run ~M-x package-install RET templatel RET~.  Notice that
   you might need to run ~M-x package-refresh-contents RET~ if you
   haven't done that in a while.

** Manually

   If you don't want to use any package installer, you can just clone
   the repository somewhere on your computer, let's say
   ~$HOME/src/templatel~.  And then you need to add that directory to
   your Emacs configuration so the library can be found by ~require~.

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/src/templatel")
   #+END_SRC

* Project Status

  Although /templatel/ has been been functional since it's very first
  lil version, it's still too early to say it's stable.  Until we
  reach 1.0, expect changes in the ~API~ as well as in the language
  itself.
